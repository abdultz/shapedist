/**
 * Copyright 2015 Abdul Zummerwala <abdul.zummerwala@yahoo.co.in>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;
import org.geotools.data.FileDataStore;
import org.geotools.data.FileDataStoreFinder;
import org.geotools.data.simple.SimpleFeatureSource;
//import org.geotools.swing.data.JFileDataStoreChooser;

public class ShapeMapRedNew {
	
    public static class ShapeFileMapper extends Mapper<Text, BytesWritable, Text, Text> {

        public void map(Text key, BytesWritable value, Context context) throws IOException, InterruptedException {
            //get the Shape Feature Count for the Shapefile
            String count;
            try {
                count = countFeatures(value.getBytes());
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                context.setStatus("Internal error - can't find the method to count the features of Shapefile");
                return;
            }
            Text countText = new Text(count);

            //put the file in the map where the md5 is the key, so duplicates will
            // be grouped together for the reduce function
            context.write(countText, key);
        }

        static String countFeatures(byte[] ShapeFile) throws NoSuchAlgorithmException, IOException
        {
            //Count of features in this file
            File file = File.createTempFile("shape", null);
            if (file == null) {
                return null;
            }
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(ShapeFile);

            FileDataStore store = FileDataStoreFinder.getDataStore(file);
            SimpleFeatureSource featureSource = store.getFeatureSource();

            // Create a map content and add our shapefile to it
            //MapContent map = new MapContent();
            //map.setTitle("Quickstart");
            //Style style = SLD.createSimpleStyle(featureSource.getSchema());
            //Layer layer = new FeatureLayer(featureSource, style);
            //map.addLayer(layer);
            System.out.println("No. of features in the Shapefile: " + featureSource.getFeatures().toArray().length);
            //for(int i=0; i<featureSource.getFeatures().toArray().length; i++)
            //{
            //System.out.println(featureSource.getFeatures());
            //}
            file.deleteOnExit();
            return String.valueOf(featureSource.getFeatures().toArray().length);

        }

    }

	public static class ShapeCountReducer extends Reducer<Text,Text,Text,Text> {

		public void reduce(Text key, Iterable<Text> values, Context context)
							throws IOException, InterruptedException {
			//Key here is the md5 hash while the values are all the image files that
			// are associated with it. for each md5 value we need to take only
			// one file (the first)
			Text imageFilePath = null;
			for (Text filePath : values) {
				imageFilePath = filePath;
				break;//only the first one
			}
			// In the result file the key will be again the image file path. 
			context.write(imageFilePath, key);
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		
		//This is the line that makes the hadoop run locally
		//conf.set("mapred.job.tracker", "local");

		String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
		if (otherArgs.length != 2) {
			System.err.println("Usage: ShapeMapRedNew <in> <out>");
			System.exit(2);
		}
		Job job = new Job(conf, "ShapeMapRedNew");
		job.setJarByClass(ShapeMapRedNew.class);
		job.setInputFormatClass(SequenceFileInputFormat.class);
		job.setMapperClass(ShapeFileMapper.class);
		//job.setReducerClass(ShapeCountReducer.class);
		//job.setNumReduceTasks(2);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
		FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
		System.exit(job.waitForCompletion(true) ? 0 : 1);
		
	}
}